# -*- coding: utf-8 -*-
"""Task_KDT01_Speech_to_Text_Pipeline(Micro-Phone) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9xVLhny-YGsdX6ocT8zArH34COf5KxU

## Objective
### Build a real-time or file-based transcription system.

### Install Required Libraries
"""

!pip install -q git+https://github.com/openai/whisper.git
!pip install -q sounddevice scipy ffmpeg-python
!sudo apt-get update
!sudo apt-get install -y ffmpeg libportaudio2 libportaudiocpp0 portaudio19-dev
!pip install noisereduce librosa

os.environ["PATH"] += os.pathsep + r"C:\ffmpeg\ffmpeg-master-latest-win64-gpl-shared\bin"

import os
print(os.environ['PATH'])

"""### Importing Required modules"""

# STEP 2: Imports and Whisper setup
from IPython.display import display, Audio
# from google.colab import files
import sounddevice as sd
import scipy.io.wavfile as wav
import soundfile as sf
import librosa
import noisereduce as nr
import tempfile
import whisper
import tempfile
import os

"""### Upload Audio File or Record from Mic"""

# Load Whisper model
model = whisper.load_model("base")
print("‚úÖ Whisper model loaded")

# Record from mic
def record_audio(duration=5, sample_rate=16000):
    print(f"üé§ Recording for {duration} seconds...")
    recording = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16')
    sd.wait()
    temp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
    wav.write(temp_wav.name, sample_rate, recording)
    print(f"‚úÖ Recording saved to {temp_wav.name}")
    return temp_wav.name


# Record audio from microphone
def check_input_device():
    devices = sd.query_devices()
    input_devices = [i for i, d in enumerate(devices) if d['max_input_channels'] > 0]
    if not input_devices:
        raise RuntimeError("No input audio device found. Please connect a microphone or upload a file.")
    print(f"Input devices available: {input_devices}")
    return input_devices[0]

device_index = check_input_device()

def record_audio(duration=5, sample_rate=16000):
    print(f"üé§ Recording for {duration} seconds...")
    recording = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16', device=device_index)
    sd.wait()
    temp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
    wav.write(temp_wav.name, sample_rate, recording)
    print(f"‚úÖ Recording saved to {temp_wav.name}")
    return temp_wav.name


def upload_audio_file():
    print("üìÇ Please upload a .wav or .mp3 file...")
    uploaded = files.upload()
    filename = next(iter(uploaded))
    print(f"‚úÖ File uploaded: {filename}")
    return filename

def check_input_device():
    devices = sd.query_devices()
    input_devices = [i for i, d in enumerate(devices) if d['max_input_channels'] > 0]
    if not input_devices:
        raise RuntimeError("No input audio device found. Please connect a microphone or upload a file.")
    print(f"Input devices available: {input_devices}")
    return input_devices[0]  # pick first available device

device_index = check_input_device()

def record_audio(duration=5, sample_rate=16000):
    print(f"üé§ Recording for {duration} seconds...")
    recording = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16', device=device_index)
    sd.wait()

"""### Transcribe Function with Timestamps"""

# STEP 4: Transcribe with timestamps
def transcribe_audio(path):
    print("üìù Transcribing...")
    result = model.transcribe(path)
    print("‚úÖ Transcription complete!\n")


    for segment in result['segments']:
        start = segment['start']
        end = segment['end']
        text = segment['text']
        print(f"[{start:.2f}s - {end:.2f}s]: {text}")

    if 'text' in result and isinstance(result['text'], str):
        return result['text']
    else:
        print("‚ö†Ô∏è Warning: Could not extract full transcribed text.")
        return "Transcription text not available."

"""### Choose Mode (Record or Upload)"""

mode = input("Choose mode: [1] Upload file, [2] Record from mic: ")

if mode == "1":
    file_path = upload_audio_file()
elif mode == "2":
    duration = int(input("Enter recording duration in seconds: "))
    file_path = record_audio(duration)
else:
    raise ValueError("Invalid option")

# Transcribe and play back
transcribed_text = transcribe_audio(file_path)
display(Audio(file_path))